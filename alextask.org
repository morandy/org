* Specifications
There are several procedures related to setting up Opti infrastructure that we need to automate to improve our operating procedures and enable disaster recovery:
The output for this should be a github wiki page, 
serving as a table of contents and requirements discussion (what is in each) of each script. 
The scripts themselves should be in separate files. 
Implement this as a subdirectory in the existing OptiRTC/Devops repository.
* TODO [#A] Analysis
** Provision a new Azure IaaS VM
*** With the following software on it:
- Chrome + LastPass
- LinqPAD 4 (Any PC)
- Visual Studio 2013 (free version should be OK)
- A recent build of OptiRTC .dlls (find me when you need this... maybe we set up a private nuget server)
*** Such that:
I can spin them up as readily and easily as possible. 
I imagine this means figuring out how to build an image of this machine that can then be used everywhere. 
I know https://www.packer.io/ is probably a good tool for doing this.
* TODO Deploy new White label 
** Create new Azure Website
[[http://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/][How to Deploy an Azure Website]]
** Create new Access Control Service Identity
* TODO Workflow and Disaster Recovery
[[https://msdn.microsoft.com/en-us/library/azure/dn495240.aspx][MSDN Azure cmdlets]]
** Deploy new SQL database from local .bacpac file or private cloud blob .bacpac, given a connection string of an Azure-compliant SQL database server. :SQL:
** Export an entire Azure Table, or collection of <PartitionKey, RowKeyRange> tuples to a CSV file, persisted in either a blob or in a local file :SQL:
Sample Code from this [[http://blogs.msdn.com/b/jmstall/archive/2012/08/03/converting-between-azure-tables-and-csv.aspx][blog post]]
#+NAME: Save Azure Table as CSV
#+BEGIN_SRC csharp
using DataAccess;
using Microsoft.WindowsAzure;

// ...
var dataFromTable = DataTable.New.ReadAzureTableLazy(Account(), "tableName");
// saves to any stream specified, the example used the console
dataFromTable.SaveToStream(Console.Out);

#+END_SRC
** Provision all OptiRTC Tables in an Azure Table Storage Account	:SQL:
** Clear all of the exported data files older than {date} from OptiRTC data export history :SQL:
** Provision an Access Control Services namespace
** Provision Redis Cache
Info from this [[https://social.msdn.microsoft.com/Forums/azure/en-US/a7976a86-0050-4ada-b644-33af93e28092/how-to-create-redis-cache-using-azure-powershell?forum=azurecache][msdn post]]

Switch to Azure Resource Manager Mode (Switch-AzureMode -Name AzureResourceManager) and you could try the following cmdlets:

New-AzureRedisCache
Get-AzureRedisCache
Set-AzureRedisCache
Remove-AzureRedisCache
New-AzureRedisCacheKey
Get-AzureRedisCacheKey
** Provision a Web Role and Install a Certificate in it
** Provision a Worker Role and Install a Certificate in it
** Provision a new Service Bus namespace, and generate non-admin keys with read and read/write permission levels.
*** (verify that all needed queues and relays are generated by their consuming service on configuration setting change)


