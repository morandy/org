Key Rotation Project

* TODO List [60%]
** TODO Add unit test coverage [16%]
- [ ] ServiceConfiguration
- [ ] StorageServiceUtilities
- [X] VersionComparer
- [ ] AzureCredentials
- [ ] AzureBlobStorage
- [ ] AzureAccountInfo
  - [ ] ServiceBusInfo
  - [ ] StorageAccountInfo
** TODO Refactoring [0%]
*** TODO StorageServiceUtilities [40%]
- [X] unified credential access
- [X] simplify methods, extract common HTTP code
  - This needs to be redone, probably for a genaric stream instead of XDocument ?
- [ ] change "magic" values to consts/config settings
- [ ] clean up code (very, very messy)
- [ ] Make "void" methods return "String" of the response body?

*** TODO KeyRotationForm [0%]
- [ ] btnCheckKeys_Click()
  - [ ] Abstract the loop more / StorageAccountInfo (?)
- [ ] generateNeyKeys()
  - [ ] Abstract this functionality to class
*** TODO Unit Tests [0%]
- [ ] More tests!
- [ ] Clean up, add "harnessy"/setup methods
** DONE Add encrypted file to storage blob in KeyRotationForm
   CLOSED: [2015-03-10 Tue 12:42]
   - CLOSING NOTE [2015-03-10 Tue 12:42] \\
     Done - changed AzureBlobStorage to encrypt the blob it adds
** DONE Get CryptoTools Working
   CLOSED: [2015-03-10 Tue 10:52]
   - CLOSING NOTE [2015-03-10 Tue 10:52] \\
     Needed to build in submodule in order to have nuget create needed packages
** DONE Research updating Service Bus SAS
   CLOSED: [2015-03-10 Tue 10:17]
   - CLOSING NOTE [2015-03-10 Tue 10:17] \\
     This functionality has been added. See SharedAccessAuthorizationRule class
     and related documentation

* access needed
Certificate
subscription-id
* Key Rotation - Table Storage
** Load JSON File
Load, verify (?)

** 1. Provide the user with a list of all accounts in the ProjectStorage scope.


#+BEGIN_SRC cs
CredentialStore store = new CredentialStore(File.ReadAllText(dialog.FileName));
items = new List<CredentialStoreItem>(store.Items.ToList().Where(i=>i.Scopes[0]=="ProjectStorage"));
List<ProjectStorageInfo> psi = GetProjectStorageInfoList(items);
#+END_SRC

** 2. If possible, indicate if the current key is the primary or secondary key for the storage account.
// sample: DefaultEndpointsProtocol=https;AccountName=30l7vaswsa1opakdsa;AccountKey=qmq6NvBaw+DTtwdHqgkHc2zl8HUqHaxURyax2Q8odynFP1RsISpRl9AwzNyHhzjif45VPKct0aTFqPosNhSqaQ==
// sample: DefaultEndpointsProtocol=https;AccountName=amdjkqeew1909dfa0;AccountKey=qzuot0xHdq0DcRTCz/t2vD0SqPLhoQeMfzDq14+vyZDED3yBA/SlAwUkhWxaijtrJ0O/a8u0tNdMZyxbKkpmHw==
// split on ';'

foreach(ProjectStorageInfo projectStorageInfo in psi)
{
  StorageKeys keys = GetStorageAccountKeys( args );
}


*** Sample UI
Project Storage
| Protocol | AccountName        | Key Type  | AccountKey                                                                               |
| https    | 30l7vaswsa1opakdsa | Primary   | qmq6NvBaw+DTtwdHqgkHc2zl8HUqHaxURyax2Q8odynFP1RsISpRl9AwzNyHhzjif45VPKct0aTFqPosNhSqaQ== |
| https    | amdjkqeew1909dfa0  | Secondary | qzuot0xHdq0DcRTCz/t2vD0SqPLhoQeMfzDq14+vyZDED3yBA/SlAwUkhWxaijtrJ0O/a8u0tNdMZyxbKkpmHw== |
|          |                    |           |                                                                                          |

** 3. Allow user to select any or all of the accounts and indicate if they want to generate new primary or secondary keys
** 4. Store newly generated keys in a copy of the original credential store used to populate the list
* Tests!
Make sure to write tests and test things.
* Questions
rename Program.cs ?

CredentialStoreItem
* Test Azure Info
subscriptionID: 8623d538-e323-4ea7-872b-2589d5e4a3ce

storage: optiteststorage

path to app.config with encryption key:
C:\src\OptiRTCAzure\OptiRTC.CredentialManagement.AdminHost\app.config

CryptoTools.SymmetricEncrypt(string plainTextToEncrypt, byte[] cryptKey)
^ cryptKey is just the Convert.ToBase64(keyvalue)

configuration/
 appSettings
  add key="symmetricKey" value="keyvaluethatweneed"

* Update Workflow

[[https://docs.google.com/a/optirtc.com/document/d/1FX1xqKNKd9b83J4LVygOwlsll8XKibaNDpodn_RNhcY/edit][Credential Management Specs]]
[[https://www.websequencediagrams.com/][Diagraming Tool]]

* TODO Match Specifications
** Key Rotation
*** TABLE STORAGE
1. [ ] Provide user with a list of all accounts in the ProjectStorage scope
2. [ ] Indicate the current key type (primary/secondary) for storage account
3. [ ] select any or all accounts and generate a new primary/secondary key
4. [ ] store new keys in copy of original credential store used to populate list
*** SERVICE BUS
1. [X] Key rotation uses SAS
2. [ ] Provide user with *DISTINCT* list of all service bus connection strings "Endpoint=sb://"
3. [ ] Indicate if primary/secondary
4. [ ] Allow user to select any/all connection strings and generate new primary/secondary keys
5. [ ] store newly generated keys in copy of original credential store file
   - IMPORTANT: Make sure to update ALL values using each connection string

*** Common
- Get list of keys (with certain specification)
  - IN: credential JSON file, type
  - OUT: list of keys of type
- Indicate key type
  - IN: list of keys<T>
  - OUT: primary/secondary ?
- generate new primary/secondary key for selection
  - IN: list of keys<T>
  - OUT: updated list of keys<T>
- store new keys in copy of original credential store used to get list
  - IN: list of keys<T>
  - OUT: file

*** Extensions
- Add support for Redis Keys

** Deployment

*** USE EXISTIGN ENCRYPTION KEY
1. [ ] Encrypt updated credential store using symmetric key in OptiRTC.CredentialManagement.AdminHost/app.config file
2. [ ] Upload encrypted store to the OptiCredentials storage account, credentials blob container
   1. [ ] Naming convention = "credentials-v{{version number}}"
   2. [ ] Show user the current version number
   3. [ ] Prompt the user for new version number
   4. [ ] Validate that new version number does not exist in the store
   5. [ ] Name new blob "credentials-v{{user-defined version number}}
3. [ ] Update the CredentialBlobVersion setting ni the OptiCredentialAdmin cloud service config file with the {{user-defined version number}}
4. [ ] Send Message to the OptiCredentialAdmin via the credentialrequest queue that new credentials are available
*** USE NEW ENCRYPTION KEY
1. [ ] Generate new symmetric key
2. [ ] Update OptiRTC.CredentialManagement.AdminHost/app.config file with this new key value
3. [ ] Encrypt updated credential stoer using the new symmetric key
4. [ ] upload store as described in "use existing encryption key" step 2 -- use existing encryption key ?
5. [ ] indicate to user that the credential admin service must be redeployed before updated credentials message is sent out

* focus:
correctly implement service bus distinct feature
then refactor


* TODO
** DONE Fix UpdateCloudServiceConfiguration
   CLOSED: [2015-03-13 Fri 10:03]
   - CLOSING NOTE [2015-03-13 Fri 10:03]
Multiple settings makes it into an array - figure out how to best access the name/value we want
** DONE Read through all code again, with standards in mind
   CLOSED: [2015-03-13 Fri 10:04]
   - CLOSING NOTE [2015-03-13 Fri 10:04]
** DONE Really give the service utilities class another pass through (too big?)
   CLOSED: [2015-03-13 Fri 10:04]
   - CLOSING NOTE [2015-03-13 Fri 10:04]
** TODO Refactor KeyRotator
- [X] Change to Interface
- [X] Remove UploadStoreToCloud, UpdateCloudConfiguration, SendNewCredentialNotification
  - Move to new class ?
- [ ] Change RegenerateKeys from void to bool, do some verification at the start of method, return false if any fails?
- [X] Add comments to each property/method

** TODO Finish TODAY
- [X] Pass through with Standards
  - [X] AzureAccount Info
  - [X] AzureBlobStorage
  - [X] AzureCredentials
  - [X] InputBox
  - [X] KeyRotationForm
  - [X] KeyRotator
  - [X] Program
  - [X] ServiceBusInfo
  - [X] StorageAccountInfo
  - [X] StorageBusRotator
  - [X] StorageServiceUtilities
  - [X] TableStorageRotator
  - [X] VersionComparer
- [X] Fix Magic stuff
  - [X] Figure out what magic values are (i.e. a service bus connection namespace)
  - [X] Create local encrypted cred store w/ info (currently information on Ironkey "store.json")
  - [X] Remove "magic" values (fetch via "opti environment")
- [-] Remove as many "Magic Strings" as possible
  - [X] AzureAccount Info
  - [ ] AzureBlobStorage
  - [ ] AzureCredentials
  - [X] InputBox
  - [X] KeyRotationForm
  - [X] KeyRotator
  - [X] Program
  - [X] ServiceBusInfo
  - [X] StorageAccountInfo
  - [X] StorageBusRotator
  - [ ] StorageServiceUtilities
  - [X] TableStorageRotator
  - [X] VersionComparer
- [X] Fix StorageServiceUtilities.UpdateCloudServiceConfiguration
  - "newConfig" should probably work with an object, not just a string
- [X] Fix "TODO"s from review
- [X] Refactoring
  - [X] Change Type radio buttons to list box
  - [X] Make ENUM of Types to pass to factory?
- [X] Go through specifications again
- [ ] Refactor Tests (see standards)
- [ ] Work more on separating UI/Code?
- [ ] Utility class becoming too big - rework ?
- [ ] For each file, "removed unused using, sort using" and format document (C-k, C-d)


* Implement KeyType enum
- in place of string keyType
- in place of "Primary" / "Secondary"

* final pass through for standards


* Pull Request
** Comments from Pull request
- InputBox.cs
  - Validating: use regex to match *or* input only numeric version and create string in code
  - Also: Use VersionComparer to detect if new version is infact newer than the old one?
- README.txt  
  - [ ] Remove layout section
- Need Better Names:
  - AppConfigAccess.cs
    - Name too general
  - AzureBlobStorage.cs
    - "Again, too general a name. What are we doing in this class?
      These are all functions related to managing the credential store
      blob, right?"
- General, Standards:
  - Method names (ALL) should be Pascal Case
  - Remove Regions
- KeyRotationForm.cs
  - Save original credential store?
    - Possibly restore on the "Quit anyway" / delete when cred store is uploaded to blob
- AzureRestUtility.cs
  - updateServiceConfiguration() -- Should we throw an exception here
    or maybe just log it and return false or something?
  - look for Pascals
- Tests
  - A few things on these tests: first of all, they are integration tests that require outside resources to be in a given state rather than standalone unit tests. This is not necessarily bad, but to enable them to run for anyone and forever, we'd have to have a script to set up the azure resources in the right account including management certificate and have that information be available to the tests when they run on appveyor. For now, we should just disable them. Though ... now that I write that, how did these pass on appveyor when you put in this pull request? Is appveyor not discovering them?
  - Second, you pretty much never have to use the word "Test" in the name of a test. It's implied.
  - Third, and this goes for all other parts of this code, avoid using #region. First, I just personally dislike it. Second, it hides code, which is generally a bad idea. Third, you don't need it. There are other ways to group functionality and see more of your code. For tests, you can add additional nested test fixtures to group related tests together.
- IKeyRotator:
  - TableStorageRotator.cs
    - "I'm not convinced you need two of these rotators. They're the
      same except the selection of the credential items to include,
      right? Perhaps just create one with a constructor that takes the
      appropriate credential items."
      - [ ] Fix, or prove that they are different?
  - StorageBusRotator.cs
    - IAzureAccountInfo (list) -- consider removing, or clarify its purpose
    - Combine LoadCredentialStore / SetAzureAccountInfoList
      - They are called sequentially, and if not, error occurs
- AccountInfo stuff
  - IAzureAccountInfo
    - Explicit comment line 47
    - SetFromCredentialStoreItemValue : More of an initialize function
      - Possibly be an abstract base class?
  - StorageAccountInfo / ServiceBusInfo
    - Possibly rename? Is it "info"?
  - ServiceBusInfo
    - SetFromCredentialStoreItemValue()
      - This function and the one above it are required to be run
        before the function below, yes? Word to the wise: never trust
        other developers to use your code the way you intend it to be
        used; instead, write it so it can't be misused. What if I
        created this object then just called GenerateNewKey?
        NullReferenceException on line 46 or 50, below. So:
	- You should create a constructor that takes a CredentialStoreItem
	- In that constructor, you should use the .Value of that item
          as an input into what are now lines 21-23
	- After those lines, you should run lines 29-32.
      - This way, just by instantiating the object, you'll have it set
        up with all the information you'll need to run the
        GenerateNewKey method.
    - SetActiveKeyType()
      - You also create a utility here and in the GenerateNewKey. Two points about this
	- using AzureRestUtility directly in this class makes it
          impossible to unit test (as it requires Azure items to
          exist)
	- You should just create it once and use it throughout the
          class
	- You probably shouldn't even create it but pass in an
          instance in the constructor via an interface. If you have a
          factory method for this (I can't recall), you could have
          that factory new up a utility and pass it in
	  - IRestUtility utility = new AzureRestUtility
	  - IAzureAccountInfo info = new ServiceBusInfo(credentialItem, utility)
	- Something like that. Then you can write a unit test to make
          sure it's setting the primary or secondary key correctly by
          mocking the result of calls on that utility via Moq. We can
          talk about this in more depth if you want/need.
	  
** Changes Made
*** DONE ReadMe
    CLOSED: [2015-03-18 Wed 09:50]
    - CLOSING NOTE [2015-03-18 Wed 09:50]
- [X] Remove Layout section
*** DONE AzureBlobStorage (approved)
- Renamed: CredentialStoreBlobManagement
*** DONE AppConfigAccess (approved)
- Renamed to AdminHostAppConfig
*** TODO KeyRotation.Tests
- [X] Remove Regions
*** TODO AzureRestUtility
- [X] Remove Regions
- [X] Fix method casing
- UpdateCloudConfiguration
  - Changed to return bool, result of PostNewServiceConfiguration
- PostNewServiceConfiguration
  - Now returns bool, if false, it logs to console any issues it had
*** DONE InputBox
- [X] Use regex to validate
- [X] Use version comparer to ensure it is a newer version
- Removing dependancy from AzureBlobStorage
  - Passing in "latestVersion" to constructor
  - Assuming that the new version number, if greater than the "latest" returned, the new one will not exist anymore

*** AccountInfo
- Making an Abstract Base Class
*** StorageAccountInfo
*** TODO Think of new name for AzureAccount classes

** Comments from Update
*** Unit Tests
- [X] Make separate "VersionComparer" test file
- [X] Merge fake StorageServices into the mock method
- [X] Remove "with mocks" from test names, since only testing with mocks
*** Rename AdminHostAppConfig
- [X] to AdminHostConfigHelper
*** RestUtility
- [X] Combine Post and Get Service (YAGNI)
*** KeyRotator
- [ ] remove comment about service bus (doesn't apply)
- [ ] Merge constructor w/ load


* questions
- Change from Interface to class?
- Go over Dependancy Injection?
  - Do I make only 1 and reuse it, or do I make one for each?
  - 
- VS generated methods excluded from this?

* AppVeyor not finding tests?
- Added an environment to the build in order to pick up my solution
- problem with Redlock?
- Latest version put on git

* How to make KeyRotator testable?
- Currently building the object requires *real* credential store file and builds a specific instance of IRestUtility which is used to create key generators
- Possible Solution:
  ctor: KeyRotator(KeyRotatorType type, CredentialStore store, string storeFileName, IRestUtility utility)
  - This would allow for "fake" stores / mocked utilities?
